DAY-4

1.SAME TREE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 **/
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        if(p==null || q==null) return false;
        if(p.val!=q.val) return false;
        return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
    }
}


_______________________________________________________________________________________________________________________________________________________________________


2.SYMMETRIC TREE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean check(TreeNode r1, TreeNode r2) {
        if(r1==null && r2==null) return true;
        if(r1==null || r2==null) return false;
        
        if(r1.val!=r2.val) return false;
        return check(r1.left,r2.right) && check(r1.right,r2.left);
    }
    public boolean isSymmetric(TreeNode root) {
        return check(root.left,root.right);
    }
}


_______________________________________________________________________________________________________________________________________________________________________


3.HAPPY NUMBER

class Solution {
    public int sqdsum(int num){
        int rem, sqsum=0;
        while(num!=0){
            rem=num%10;
            sqsum+=rem*rem;
            num=num/10;
        }
        return sqsum;
    }
    public boolean isHappy(int n) {
        Set<Integer> s = new HashSet<>();
        while(n!=1){
            if(s.contains(n))
                return false;
            s.add(n);
            n=sqdsum(n);
        }
        return true;
    }
}
