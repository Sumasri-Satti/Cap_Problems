1.DISTANCE OOP

import java.util.Scanner;

abstract class Distance {
    protected int feet;
    protected float inches;
    
    abstract public void setFeetAndInches(int feet, float inches);
    abstract public int getFeet();
    abstract public float getInches();
    abstract String getDistanceComparison(Distance dist2);
}

class DistanceImplementation extends Distance{
    public void setFeetAndInches(int feet, float inches){
        this.feet=feet;
        this.inches=inches;
    }
    public int getFeet(){
        return this.feet;
    }
    public float getInches(){
        return this.inches;
    }
    public float getFeetToInc(){
        return (float)feet*12+inches;
    }
    public String getDistanceComparison(Distance dist2){
        float d1=(float)feet*12+inches;
        float d2=(float)dist2.getFeet()*12+dist2.getInches();
        
        if(d1>d2){
            return "First distance is greater.";
        }
        else if(d2>d1){
            return "Second distance is greater.";
        }
        else{
            return "Both distances are equal.";
        }
    }
}
public class DistanceCalculator {
    private static final Scanner scan = new Scanner(System.in);
    
    public static void main(String[] args) {
        Distance dist1 = new DistanceImplementation();
        Distance dist2 = new DistanceImplementation();
        
        int feet1 = scan.nextInt();
        float inches1 = scan.nextFloat();
        
        int feet2 = scan.nextInt();
        float inches2 = scan.nextFloat();
        
        dist1.setFeetAndInches(feet1, inches1);
        dist2.setFeetAndInches(feet2, inches2);
        
        System.out.println(dist1.getDistanceComparison(dist2));
    }
} 

2.JESSE AND COOKIES

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'cookies' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY A
     */

    public static int cookies(int k, List<Integer> A) {
    // Write your code here
        PriorityQueue<Integer> queue=new PriorityQueue<>();
        for(int i:A)
            queue.add(i);
        int c=0;

        while(queue.peek()<k ){
            if(queue.size()>=2){
                int m1=queue.remove();
                int m2=queue.remove();
                int ins=m1+2*m2;
                queue.add(ins);
                c++;
            }
            else
                return -1;
            
        }
        return c;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int k = Integer.parseInt(firstMultipleInput[1]);

        List<Integer> A = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.cookies(k, A);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
