DAY-3

1.BALANCED BINARY TREE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {    
    boolean flag=true;
    public int height(TreeNode t){
        if(t==null) return 0;
        int lh=height(t.left);
        int rh=height(t.right);
        if(Math.abs(lh-rh)>1)
                flag=false;
        return Math.max(lh,rh)+1;
    }

    public boolean isBalanced(TreeNode root) {
        height(root);
        return flag;
    }
}


_______________________________________________________________________________________________________________________________________________________________________


2.MINIMUM DEPTH OF BINARY TREE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null)
            return 0;
        int ld=minDepth(root.left);
        int rd=minDepth(root.right);
        if(ld==0 || rd==0)
            return ld+rd+1;
        return Math.min(ld,rd)+1;

    }
}
