DAY-6

1.SEARCH IN BINARY TREE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        while(root!=null&&root.val!=val){
            if(val<root.val) 
                root=root.left;
            else 
                root=root.right;
        }
        return root;
    }
}


___________________________________________________________________________________________________________________________________________________________


2.TWO SUM IV - INPUT IS A BST

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    LinkedList<Integer> res=new LinkedList<Integer>();
    public LinkedList inOrder(TreeNode root){
        if(root!=null){
            inOrder(root.left);
            res.add(root.val);
            inOrder(root.right);
        }
        return res;
    }
    public boolean bSearch(int low,int high,int k){
        while(low<=high){
            int mid=low+(high-low)/2;
            if(res.get(mid)==k) return true;
            if(k<res.get(mid)) high=mid-1;
            else low=mid+1;
        }
        return false;
    }
    public boolean findTarget(TreeNode root, int k) {
        inOrder(root);
        for(int i=0;i<res.size();i++){
            if(res.get(i)*2!=k && bSearch(0,res.size()-1,k-res.get(i)))
                return true;
        }
        return false;
    }
}

