DAY-9

1.LONGEST CONSECUTIVE SEQUENCE

class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
        HashSet<Integer> set=new HashSet<>();
        for (int i: nums) {
            set.add(i);
        }
        int c=0,m=0;
        for(int i=0;i<nums.length;i++){
            int val=nums[i];
            if(!set.contains(val-1)){
                c=1;
                while(set.contains(val+1)){
                    c+=1;
                    val+=1;
                }
                m=Math.max(m,c);
            }
        }
        return m;
    }
}


_______________________________________________________________________________________________________________________________________________________________________


2.LARGEST SUBARRAY WITH 0 SUM

//{ Driver Code Starts
import java.util.*;

class MaxLenZeroSumSub
{

    // Returns length of the maximum length subarray with 0 sum

    // Drive method
    public static void main(String arg[])
    {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T > 0)
        {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++)
                arr[i] = sc.nextInt();

            GfG g = new GfG();
            System.out.println(g.maxLen(arr, n));
            T--;
        }
    }
}
// } Driver Code Ends


class GfG
{
    int maxLen(int arr[], int n)
    {
        // Your code here
        HashMap<Integer,Integer> mp=new HashMap<>();
        int sum=0,m=0,c=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==0){
                m=i+1;
                c+=1;
            }
            else{
                if(mp.containsKey(sum)){
                    m=Math.max(m,i-mp.get(sum));
                    c+=1;
                }
                else
                    mp.put(sum,i);
            }
        }
        return c;
    }
}

_______________________________________________________________________________________________________________________________________________________________________


3.LONGEST SUBARRAY WITH SUM K



//User function Template for Java

class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int A[], int N, int K) {
        HashMap<Integer,Integer> mp=new HashMap<>();
        mp.put(0,-1);
        int sum=0,max=0;
        for(int i=0;i<N;i++){
            sum+=A[i];
            if(mp.containsKey(sum-K)){
                max=Math.max(max,i-mp.get(sum-K));
            }
            if(!mp.containsKey(sum))
                mp.put(sum,i);
        }
        return max;
    }
}
